/*
Filename:           ai_i_debug
System:             Memetic AI (include script)
Author:             Michael A. Sinclair (Squatting Monk)
Date Created:       Jun. 3, 2009
Summary:
Memetic AI include script. This file holds debug functions commonly used
throughout the Memetic AI system.

Revision Info should only be included for post-release revisions.
-----------------
Revision Date:
Revision Author:
Revision Summary:

*/

#include "ai_c_main"


/******************************************************************************/
/*                             Function Prototypes                            */
/******************************************************************************/

// ---< ai_StartDebugging >---
// ---< ai_i_debug >---
// Starts the XML Debugging for the object which calls this function. If called
// on the module, it will start debugging on all objects if AI_DEBUG_ALL_OBJECTS
// is TRUE (see ai_c_main). This debug information is generated by calling
// ai_DebugStart(), ai_DebugEnd(), ai_PrintString().
//
// Warning: Some of the ai_*() functions use a combination of  AssignCommand
// and ExecuteScript, which cause other objects to be running the scripts. You
// may need to debug the module as well as a single creature to get a full log.
// Or try debugging everything.
//
// Note: To view the XML log in Internet Explorer or an equivalent XML viewer,
// you must add <Log> to the start and </Log> to the end of your log file and
// change the extension to .xml.
void ai_StartDebugging();

// ---< ai_AddDebugObject >---
// ---< ai_i_debug >---
// Causes the object to be debugged
void ai_AddDebugObject(object oTarget = OBJECT_SELF);

// ---< ai_ClearDebugObject >---
// ---< ai_i_debug >---
// Deletes the permission of oTarget to debug
void ai_ClearDebugObject(object oTarget = OBJECT_SELF);

// ---< ai_AddDebugFlag >---
// ---< ai_i_debug >---
// Sets the maskable debug level. If you wanted to debug the toolkit and all
// related utility functions you would call: ai_AddDebugFlag(AI_DEBUG_TOOLKIT);
void ai_AddDebugFlag(int nDebugFlag);

// ---< ai_IsDebugging >---
// ---< ai_i_debug >---
// Checks to see if the given debug flag is currently being debugged.
int ai_IsDebugging(int nDebugFlag);

// ---< ai_ClearDebugFlag >---
// ---< ai_i_debug >---
// Clears nDebugFlag from the module's debug-flag
void ai_ClearDebugFlag(int nDebugFlag);

// ---< ai_DebugStart >---
// ---< ai_i_debug >---
// Starts a debug function
// Parameters:
// - nDebugFlag: this flag decides if the tag will be printed or ignored
// - bAddInfo: if TRUE, prints additional information inside the XML tag
void ai_DebugStart(string sTag, int nDebugFlag = AI_DEBUG_USERAI, int bAddInfo = TRUE);

// ---< ai_PrintString >---
// ---< ai_i_debug >---
// Prints out a debug statement to an XML log if debugging is turned on
// via the function ai_StartDebugging(). See ai_DebugStart and ai_DebugEnd
// functions for folding debug statements.
// Parameters:
// - sNote: The string
// - bInherit: If this is true it will use the value defined by ai_DebugStart
// - nDebugFlag: This will override the debug value
void ai_PrintString(string sNote, int bInherit = TRUE, int nDebugFlag = AI_DEBUG_USERAI);

// ---< ai_DebugEnd >---
// ---< ai_i_debug >---
// Ends a function to be debugged, writing a closing tag to the log, like
// </MyFunction>. If ai_DebugStart is called in any function, this *MUST* be
// called at the close } of a function or before any "return;" statements are
// executed. Otherwise, the XML will not be properly written to the log; the
// closing tag will be missing.
//
// While you do not need to provide the tag or debugflag, you may do so to
// improve readability when debug statements are nested.
void ai_DebugEnd(string sDepricated="", int nDepricated = 0);


/******************************************************************************/
/*                          Function Implementations                          */
/******************************************************************************/

// Internal debug function. Deletes the nNth character from sString.
string DeleteCharacter(string sString, int nNth)
{
    return GetStringLeft(sString, nNth) + GetStringRight(sString, GetStringLength(sString) - nNth - 1);
}

// Internal debug function. Removes non-alphanumeric characters from sString.
string RemoveIllegalCharacters(string sString)
{
    int i = 0;
    string sChar, sAllowedChars = AI_DEBUG_LEGAL_CHARACTERS;
    while (i < GetStringLength(sString))
    {
        sChar = GetSubString(sString, i, 1);
        if (FindSubString(sAllowedChars, sChar) == -1)
           sString = DeleteCharacter(sString, i);
        else
            i++;
    }
    return sString;
}

// Internal debug function. Retrieves a name from oTarget.
string _GetName(object oTarget)
{
    if (!GetIsObjectValid(oTarget))
        return "InvalidObject";
    string sName = GetName(oTarget);
    if (sName == "")
        return "UnnamedObject";
    else
        return RemoveIllegalCharacters(sName);
}

// This function properly normalize thes xml tag string:
// Mr. Jack attrib=value  --->  Mr.Jack attrib=value
// Old Mibbs Thickney     --->  OldMibbsThickney
// a b c d = 123          --->  abc d = 123
string _RemoveSpaces(string tag)
{
    int    len, offset;
    string left, right, original;

    offset  = FindSubString(tag, " ");
    while (offset != -1)
    {
        original = tag;
        len   = GetStringLength(tag);
        left  = GetStringLeft (tag, offset);
        right = GetStringRight(tag, len - GetStringLength(left) - 1);
        tag   = left + right;
        offset  = FindSubString(tag, " ");
    }
    return tag;
}

string _RemoveQuotes(string tag)
{
    int    len, offset;
    string left, right, original;

    offset  = FindSubString(tag, "'");
    while (offset != -1)
    {
        original = tag;
        len   = GetStringLength(tag);
        left  = GetStringLeft (tag, offset);
        right = GetStringRight(tag, len - GetStringLength(left) - 1);
        tag   = left + right;
        offset  = FindSubString(tag, "'");
    }
    return tag;
}

void ai_StartDebugging()
{
    if (AI_DEBUG_MODE)
        SetLocalFlag(GetModule(), AI_DEBUG_FLAG, AI_DEBUG_LEVEL);
}

void ai_AddDebugObject(object oTarget = OBJECT_SELF)
{
    if (AI_DEBUG_MODE)
        SetLocalInt(oTarget, AI_DEBUGGING, TRUE);
}

void ai_ClearDebugObject(object oTarget = OBJECT_SELF)
{
    if (AI_DEBUG_MODE)
        DeleteLocalInt(oTarget, AI_DEBUGGING);
}

void ai_AddDebugFlag(int nDebugFlag)
{
    if (AI_DEBUG_MODE)
        SetLocalFlag(GetModule(), AI_DEBUG_FLAG, nDebugFlag);
}

int ai_IsDebugging(int nDebugFlag = AI_DEBUG_ALL)
{
    if (AI_DEBUG_MODE)
        return GetIsLocalFlagSet(GetModule(), AI_DEBUG_FLAG, nDebugFlag);

    return FALSE;
}

void ai_ClearDebugFlag(int nDebugFlag)
{
    if (AI_DEBUG_MODE)
        ClearLocalFlag(GetModule(), AI_DEBUG_FLAG, nDebugFlag);
}

void ai_DebugStart(string sTag, int nDebugFlag = AI_DEBUG_USERAI, int bAddInfo = FALSE)
{
    if (AI_DEBUG_MODE && (AI_DEBUG_ALL_OBJECTS || GetLocalInt(OBJECT_SELF, AI_DEBUGGING)))
    {
        object oModule = GetModule();
        int nTagNumber = GetLocalInt(oModule, AI_DEBUG_TAG_NUMBER);
        SetLocalInt(oModule, AI_DEBUG_TAG_NUMBER, ++nTagNumber);

        if (GetIsLocalFlagSet(oModule, AI_DEBUG_FLAG, nDebugFlag))
        {
            string sTagSuffix = IntToString(nTagNumber);
            int nSpace = FindSubString(sTag, " ");

            if (nSpace != -1)
                SetLocalString(oModule, AI_DEBUG_TAG + sTagSuffix, GetSubString(sTag, 0, nSpace));
            else
                SetLocalString(oModule, AI_DEBUG_TAG + sTagSuffix, sTag);

            SetLocalInt(oModule, AI_DEBUG_TAG + sTagSuffix, TRUE);

            if (bAddInfo)
                sTag += " Name = '" + _GetName(OBJECT_SELF) + "' Tag = '" + GetTag(OBJECT_SELF) + "'";
            PrintString("<" + sTag + ">");
        }
    }
}


void ai_PrintString(string sNote, int bInherit = TRUE, int nDebugFlag = AI_DEBUG_USERAI)
{
    if (AI_DEBUG_MODE)
    {
        object oModule = GetModule();
        if (bInherit)
        {
            if (GetLocalInt(oModule, AI_DEBUG_TAG + IntToString(GetLocalInt(oModule, AI_DEBUG_TAG_NUMBER))))
                PrintString("<Note>" + sNote + "</Note>");
        }
        else if ((AI_DEBUG_ALL_OBJECTS) || GetLocalInt(OBJECT_SELF, AI_DEBUGGING))
                 if (GetIsLocalFlagSet(oModule, AI_DEBUG_FLAG, nDebugFlag))
                     PrintString("<Note>" + sNote + "</Note>");
    }
}

void ai_DebugEnd(string sDepricated="", int nDepricated = 0)
{
    if (AI_DEBUG_MODE)
    {
        object oModule = GetModule();
        int nTagNumber = GetLocalInt(oModule, AI_DEBUG_TAG_NUMBER);
        string sTagSuffix = IntToString(nTagNumber);
        SetLocalInt(oModule, AI_DEBUG_TAG_NUMBER, --nTagNumber);
        if (GetLocalInt(oModule, AI_DEBUG_TAG + sTagSuffix))
        {
            string sTag = GetLocalString(oModule, AI_DEBUG_TAG + sTagSuffix);
            DeleteLocalString(oModule, AI_DEBUG_TAG + sTagSuffix);
            DeleteLocalInt(oModule, AI_DEBUG_TAG + sTagSuffix);
            PrintString("</" + sTag + ">");
        }
    }
}

// void main(){}
